% Осциллирующие функции
F1 = @(x) sin(x);
F2 = @(x) sin(2.5*cos(x));
F3 = @(x) sin(x).*cos(x);
F4 = @(x) cos(sin(4*x));
F5 = @(x) exp(sin(x));

% Монотонные функции 
F6 = @(x) exp(x);
F7 = @(x) sinh(x);
F8 = @(x) atan(x);
F9 = @(x) x.^6;
F11 = @(x) log(x+3);

% Дробно-рациональные функции
F12 = @(x) 1./(x.^2+1);
F13 = @(x) (x.^5 + x.^3 + x)./(x.^6 + x.^2 + 3);
F14 = @(x) 1./(x.^2 + x + 1);
F16 = @(x) sin(x)./(x.^2+1);
F17 = @(x) (x.^2 + 2)./(x.^2 + 1);

% Проблематичные функции
F18 = @(x) max(sin(20*x), exp(x-1));
F20 = @(x) log(1.001 + x);
F21 = @(x) (100*pi*(x.^2-0.36))./(sinh(100*pi*(x.^2-0.36)))
F22 = @(x) abs(x).*sqrt(abs(x));
F24 = @(x) tanh(50*x); 
F25 = @(x) sin(20*(x));


%--------------------------------------------------------------------------
%Базовый алгоритм IRLS.
% 1)	Принимает:
% а)	Приближаемую функцию, заданную дискретно:
%    	x  список, содержащий набор точек на интервале аппроксимации 
%        [-1, 1];
%    	y  список, содержащий значения функции в точках списка x;
%       Количество точек формируется исходя из степени приближающего 
%       полинома N (N + 2); 
%
% б)	N  целое число, обозначающее степень приближающего полинома 
%
% 2)	Возвращает:
% а)	result  список ошибок метода при аппроксимации приближающей функции в зависимости от степени N;
% б)	График функции ошибки и график приближающей и приближаемой функции;
%--------------------------------------------------------------------------


LF = 1000; N = 16; 
x = linspace(-1, 1, LF)';

% Приближаемая функция.
y = (x.^2 + 2)./(x.^2 + 1);
% ---------------------


A = zeros(LF,N);
 for i = 1:LF
     for j = 1:N
         A(i,j) = x(i)^(j-1);
     end
 end
 
 KK = 20;
 p = 2.5;
 [b, iter_n] = Basic_IRLS(A, y, p, KK);
 
 r_x = []
 for i =1:length(x)
     r_x = [r_x; func_sum(x(i),b)];
 end
 
 % График функции ошибки.
 plot(x, y-r_x), grid on
 
 % Максимальное отклонение.
 disp([max(y-r_x)]);
 
 
 % Вычисление приближающей функции. 
 function val = func_sum(x, b)
    val = 0;
    for i = 1:length(b)
        val = val + x^(i-1)*b(i);
    end
 end
 
    